// Generated by view binder compiler. Do not edit!
package com.example.alarmapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.alarmapp.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.materialswitch.MaterialSwitch;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemAlarmBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialCardView alarmCard;

  @NonNull
  public final MaterialSwitch alarmSwitch;

  @NonNull
  public final ConstraintLayout baseContainer;

  @NonNull
  public final ImageButton deleteButton;

  @NonNull
  public final ConstraintLayout expandableContent;

  @NonNull
  public final ConstraintLayout interactiveLayer;

  @NonNull
  public final TextView labelText;

  @NonNull
  public final LinearLayout mainContent;

  @NonNull
  public final LinearLayout timeContainer;

  @NonNull
  public final TextView timeText;

  private ItemAlarmBinding(@NonNull MaterialCardView rootView, @NonNull MaterialCardView alarmCard,
      @NonNull MaterialSwitch alarmSwitch, @NonNull ConstraintLayout baseContainer,
      @NonNull ImageButton deleteButton, @NonNull ConstraintLayout expandableContent,
      @NonNull ConstraintLayout interactiveLayer, @NonNull TextView labelText,
      @NonNull LinearLayout mainContent, @NonNull LinearLayout timeContainer,
      @NonNull TextView timeText) {
    this.rootView = rootView;
    this.alarmCard = alarmCard;
    this.alarmSwitch = alarmSwitch;
    this.baseContainer = baseContainer;
    this.deleteButton = deleteButton;
    this.expandableContent = expandableContent;
    this.interactiveLayer = interactiveLayer;
    this.labelText = labelText;
    this.mainContent = mainContent;
    this.timeContainer = timeContainer;
    this.timeText = timeText;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemAlarmBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemAlarmBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_alarm, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemAlarmBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      MaterialCardView alarmCard = (MaterialCardView) rootView;

      id = R.id.alarmSwitch;
      MaterialSwitch alarmSwitch = ViewBindings.findChildViewById(rootView, id);
      if (alarmSwitch == null) {
        break missingId;
      }

      id = R.id.baseContainer;
      ConstraintLayout baseContainer = ViewBindings.findChildViewById(rootView, id);
      if (baseContainer == null) {
        break missingId;
      }

      id = R.id.deleteButton;
      ImageButton deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.expandableContent;
      ConstraintLayout expandableContent = ViewBindings.findChildViewById(rootView, id);
      if (expandableContent == null) {
        break missingId;
      }

      id = R.id.interactiveLayer;
      ConstraintLayout interactiveLayer = ViewBindings.findChildViewById(rootView, id);
      if (interactiveLayer == null) {
        break missingId;
      }

      id = R.id.labelText;
      TextView labelText = ViewBindings.findChildViewById(rootView, id);
      if (labelText == null) {
        break missingId;
      }

      id = R.id.mainContent;
      LinearLayout mainContent = ViewBindings.findChildViewById(rootView, id);
      if (mainContent == null) {
        break missingId;
      }

      id = R.id.timeContainer;
      LinearLayout timeContainer = ViewBindings.findChildViewById(rootView, id);
      if (timeContainer == null) {
        break missingId;
      }

      id = R.id.timeText;
      TextView timeText = ViewBindings.findChildViewById(rootView, id);
      if (timeText == null) {
        break missingId;
      }

      return new ItemAlarmBinding((MaterialCardView) rootView, alarmCard, alarmSwitch,
          baseContainer, deleteButton, expandableContent, interactiveLayer, labelText, mainContent,
          timeContainer, timeText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
